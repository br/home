#!/bin/bash

#/ NAME
#/     deploy -- central script for alpha_omega commands
#/
#/ SYNOPSIS
#/     
#/     deploy
#/     stage
#/     activate
#/     restart
#/     rollback
#/     release
#/
#/     bump 
#/         major|minor|patch
#/         [1.2.3]
#/         * without arguments, defaults to patch 
#/     migrate 
#/         list | [data|pre|during|post]
#/         [YYYYMMDDHHMMSS]
#/         [any_task]
#/     compare
#/
#/     repl [host]
#/
#/     check
#/     plan
#/
#/     hosts
#/         [group] | [host]
#/         all | world
#/     dna
#/     shell
#/     invoke
#/         [command_and_args]
#/     debug
#/
#/     lock
#/         compare|migrate
#/     unlock
#/         compare|migrate
#/

# first time, this will be empty, to trigger enforce_rvm
: ${_AO_RVM:=}

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/bin/_prime" "$@"

# ensure script runs under rvm
function enforce_rvm {
  if [[ -n "$_AO_RVM" ]]; then
    return 
  fi

  export _AO_RVM=1

  local pth_ruby_loader="$(ryaml $shome/config/deploy.yml ruby_loader)"
  local ruby_deploy="$(ryaml $shome/config/deploy.yml deploy_ruby)"

  if [[ -z $pth_ruby_loader || -z $ruby_deploy ]]; then
    return
  fi

  if [[ ! -x $pth_ruby_loader ]]; then
    return
  fi

  echo $pth_ruby_loader $ruby_deploy "$0" "$@"
  exec $pth_ruby_loader $ruby_deploy "$0" "$@"
}

enforce_rvm

# entry point
function main {
  if [[ "$#" == 0 ]]; then
    logger_fatal "need at least one argument"
    exit 1
  fi

  local nm_component="$1"; shift
  # HACK TODO
  if [[ "$nm_component" = "production" ]]; then
    logger_fatal "must specify a pod name when deploying to production"
    exit 1
  fi

  # HACK TODO
  if [[ "$nm_component" = "pod1" ]]; then
    nm_component="sys"
  fi

  case "$nm_component" in 
    *)
      if [[ "$FLAGS_autoconf" = "$FLAGS_TRUE" ]]; then
        PATH="$shome/.deploy/ssh/bin:$PATH"
      fi

      if [[ -n "$FLAGS_gateway" ]]; then
        export GATEWAY="$FLAGS_gateway"
      fi

      if [[ -n "$FLAGS_chef" ]]; then
        export CHEF_PATH="$(cd -P -- "$FLAGS_chef" && pwd -P)"
      fi

      if [[ -d "$HOME/.getting-started/.git" ]]; then
        FLAGS_proxy="$FLAGS_TRUE"
      fi

      if [[ "$FLAGS_proxy" = "$FLAGS_FALSE" || "$FLAGS_direct" = "$FLAGS_TRUE" ]]; then
        export _AO_DEPLOY=1
        export BUNDLE_GEMFILE="$shome/.deploy/Gemfile"
        bundle check 2>&1 >/dev/null || { bundle install --quiet --local --path vendor/bundle || bundle check > /dev/null; }
        exec bundle exec alpha_omega $(basename $0) "$nm_component" "$@"
      else
        if [[ "$#" > 0 ]]; then
          if [[ "$1" = "production" ]]; then
            if [[ -z "$FLAGS_tag" || "$FLAGS_tag" = "HEAD" ]]; then
              logger_fatal "must specify a version using --tag"
              exit 1
            fi
          fi 
        fi

        exec $shome/bin/proxy "$FLAGS_gateway" "$FLAGS_tag" $(basename $0) "$nm_component" "$@"
      fi
      exit 1
      ;;
  esac
}

# build the site with jekyll
function build_site {
  export BUNDLE_GEMFILE="$shome/.doc/Gemfile"

  cd "$shome/site"
  local old_path="$PATH"
  PATH="$PATH:$shome/libexec"
  bundle check 2>&1 >/dev/null || { bundle install --quiet --local --path vendor/bundle || bundle check > /dev/null; }
  bundle exec jekyll
  PATH="$old_path"
}

# define command line options:
#   var name, default, description, short option
DEFINE_string "gateway" "deploy" "deploy gateway host" "g"
DEFINE_boolean "autoconf" "$FLAGS_TRUE" "use config/ssh to configure remote access" "z"
DEFINE_boolean "proxy" "$FLAGS_FALSE" "use a gateway to proxy deploys" "p"
DEFINE_boolean "direct" "$FLAGS_FALSE" "override proxy" "d"
DEFINE_string "chef" "" "location to chef repo with opsdb" "c"
DEFINE_string "tag" "HEAD" "tag to deploy in production" "t"

# parse the command-line
export _AO_OPT="$@"
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"
export _AO_ARGS="$@"

# pass arguments to entry point
main "$@"
