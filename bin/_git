#!/bin/bash

function gdiff {
  git diff --no-ext-diff -w -b "$@" | vim -R -
}

function vdiff {
  diff -r -b -w "$@" | vim -R -
}

alias gs="pushd ./\$(\git rev-parse --show-cdup) > /dev/null; \git submodule summary; popd > /dev/null; \git status -s --ignore-submodules=dirty" # TODO add -b back with autodetect
alias gl="\git lg"

# http://jeetworks.org/node/52
function cdd {
  if [[ $(which git 2> /dev/null) ]]; then
    STATUS=$(git status --ignore-submodules=dirty 2>/dev/null)
    if [[ -z $STATUS ]]; then
      return
    fi
    TARGET="./$(git rev-parse --show-cdup)$1"
    cd $TARGET
  fi
}

function _cdd {
  if [[ $(which git 2> /dev/null) ]]; then
    STATUS=$(git status --ignore-submodules=dirty 2>/dev/null)
    if [[ -z $STATUS ]]; then
      return
    fi
    TARGET="./$(git rev-parse --show-cdup)"
    if [[ -d $TARGET ]]; then
      TARGET="$TARGET/"
    fi
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}$2"
    dirnames=$(cd $TARGET; compgen -o dirnames $2)
    opts=$(for i in $dirnames; do  if [[ $i != ".git" ]]; then echo $i/; fi; done)
    if [[ ${cur} == * ]] ; then
      COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
      return 0
    fi
  fi
}

complete -o nospace -F _cdd cdd

function git_serve {
  local magic='XXXXXXXX'

  local last_port
  local p
  local a
  for p in {9419..9999}; do 
    echo "$magic $p"
    git daemon --reuseaddr --verbose  --port=$p --base-path=. --export-all ./.git 2>&1
    if [[ "$?" != 128 ]]; then # cannot bind to port
      exit 0
    fi
  done | while read -r a status; do 
    if [[ "$status" = 'Ready to rumble' ]]; then 
      local git_pid="${a#[}"
      git_pid="${git_pid%]}"
      local command="$1"; shift
      "$command" "$last_port" "$@"
      local save_exit="$?"
      kill "$git_pid"
      return "$save_exit"
    elif [[ "$a" = "$magic" ]]; then 
      last_port="$status"
    else
      echo "YYYY: $a $status"
    fi
  done
}

function git_clone {
  local git_port="$1"; shift
  local nm_remote="$1"; shift

  local pth_sentinel="$(ssh $nm_remote mktemp -t XXXXXXX)"

  rm -f $git_port.txt
  ssh -o ExitOnForwardFailure=yes -R0:localhost:$git_port -f $nm_remote bin/sleep_until $pth_sentinel > $git_port.txt 2>&1
  remote_port="$(awk '$1 == "Allocated" { print $3 }' $git_port.txt)"
  rm -f $git_port.txt

  ssh $nm_remote git clone "git://localhost:$remote_port/" $git_port-$remote_port.git
  ssh $nm_remote rm -f $pth_sentinel
}
