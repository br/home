#!/bin/bash

#/ NAME
#/     build -- builds static site, runs build phase of deploy
#/           -- upload the latest (timestamp) rubygem to rubygems.org
#/
#/ SYNOPSIS
#/     build site
#/     build [alpha_omega arguments]
#/     build gem -n gem_name

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/bin/_prime" "$@"

# entry point
function main {
  nm_component="$1"; shift

  case "$nm_component" in 
    site)
      build_site "$@"
      ;;
    gem)
      build_gem "$@"
      ;;
    *)
      unset BUNDLE_GEMFILE

      bundle check 2>&1 >/dev/null || { bundle install --quiet --local --path vendor/bundle || bundle check > /dev/null; }
      exec bundle exec alpha_omega $(basename $0) "$@"
      ;;
  esac
}

# build the site with jekyll
function build_site {
  export BUNDLE_GEMFILE="$shome/.doc/Gemfile"

  cd "$shome/site/_site"
  rsync -ia -O --delete --exclude .git --exclude generated generated/. .
  rm -rf generated

  cd "$shome/site"
  bundle check 2>&1 >/dev/null || { bundle install --quiet --local --path vendor/bundle || bundle check > /dev/null; }
  bundle exec jekyll
}

# build a gem
function build_gem {
  pth_gemspec="$shome/$FLAGS_name.gemspec"
  if [[ ! -e "$pth_gemspec" ]]; then
    logger_fatal "could not find gemspec $pth_gemspec"
    exit 1
  fi

  cd "$shome"
  gem build "$pth_gemspec"
}

# define command line options:
#   var name, default, description, short option
DEFINE_string 'name' "$(basename "$shome")" 'name of gem' 'n'

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

if [[ "$#" < 1 ]]; then
  logger_fatal "missing component(s)"
  exit 1
fi

# pass arguments to entry point
main "$@"
